def get_node() {
  if ("$PLATFORM" == "linux_64") return "LinuxNode";
  if ("$PLATFORM" == "sun") return "SunSPARC";
  if ("$PLATFORM" == "sun_64") return "SunSPARC";
  if ("$PLATFORM" == "sunx86_64") return "Sunx86";
  if ("$PLATFORM" == "aix_64") return "AIX";
  return none;
}

def test_build_results() {
  def out = sh script: "cat build/${BUILD_TYPE}/build-result.txt", returnStdout: true
  def (res, err , warn) = out.trim().tokenize(':')
  if (res.toInteger()>0) {
    echo "Make returned error: Setting build to FAILURE"
    currentBuild.result = 'FAILURE'
  } else if (err.toInteger()>0) {
    echo "Output parser founded errors: Setting build to FAILURE" 
    currentBuild.result = 'FAILURE'
  } else if (warn.toInteger()>0) {
    echo "Output parser founded warnings: Setting build to UNSTABLE"
    currentBuild.result = 'UNSTABLE'
  }
}

def get_node_test_filter() {
  if ("$PLATFORM" == "sun") return "-E \"test-(http|database)\"";
  if ("$PLATFORM" == "sun_64") return "-E \"test-(http|database)\"";
  if ("$PLATFORM" == "sunx86_64") return "-E test-http";
  return "";
}

def build() {
  return { 
   
}

pipeline {
  agent { node { label get_node() } }
  environment {
    PIPELINE_DIR="JenkinsPipeline/MW"
  }
  options {
      ansiColor('xterm')
      skipDefaultCheckout()
      timestamps()
      buildDiscarder(logRotator(numToKeepStr: '3'))
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }
    stage("Clean") {
      when { not { branch 'jenkins-pipeline-sandbox'} }
      steps { sh "rm -rf build" }
    }
    stage("Build") {
      steps {
        dir('build_reports') { deleteDir(); }
        sh "${PIPELINE_DIR}/build.sh"
        test_build_results()
      }
      post {
        always {
          publishHTML (target: [
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'build_reports',
              reportFiles: 'build.html',
              reportName: "Build Report ($PLATFORM)"
            ])
        }
      }
    }
    stage ('Test') {
      when {
         expression { PLATFORM == 'linux_64' ||  PLATFORM == 'sunx86_64' ||  PLATFORM == 'sun_64' ||  PLATFORM == 'sun' }
      }
      environment {
        CTEST_NODE_FILTER=get_node_test_filter()
      }
      steps {
        sh '${PIPELINE_DIR}/test.sh'
      }
      post {
        always {
          junit healthScaleFactor: 0.0, testDataPublishers: [[$class: 'ClaimTestDataPublisher']], testResults: "build/${BUILD_TYPE}/test-*.xml"
        }
      }
    }
    stage ('Package') {
      steps {
       sh '${PIPELINE_DIR}/package.sh'
        archiveArtifacts artifacts: "build/${BUILD_TYPE}/*.tar.gz", fingerprint: true
      }
    }
  }
}
